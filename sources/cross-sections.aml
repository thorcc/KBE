;=========================================
; Class: cross-section-model
; Superclass used for querying class-names
;=========================================
(define-class cross-section-model
  :inherit-from(tagging-object position-object)
  :properties (
               optimization-object	(default nil)
               type 				(default nil)
               area 				(get-area !superior ^type)

               max-element-size		0.004
               tag-dimensions 		'(1 2)
               tag-attributes 		(list ^max-element-size .1
                                          0 0.1 0 20.0 1.0e-5)
               )
  )

(define-method get-width cross-section-model ()
  !width
  )

(define-method get-height cross-section-model ()
  !height
  )


(define-method get-area cross-section-model (type)
  (case type
    ('circular 			(* pi (/ (expt !diameter 2) 4)))
    ('circular-tube		(* pi 0.25 (- (expt !outer-diameter 2) (expt !inner-diameter 2))))
    ('rectangular		(* !width !height))
    ('rectangular-tube	(- (* !width !height) (* !inner-width !inner-height)))
    ('line				nil)
    ('i-beam			(+ (* !width !flange-thickness 2) (* !height !web-thickness)))
    ('h-beam			(+ (* !height !flange-thickness 2) (* !width !web-thickness)))
    ('polygonal			(* 2 (sqrt 3) !R))
    ('polygon     (* 0.25 !n (expt (points-distance (nth 0 (the poly vertices)) (nth 1 (the poly vertices))) 2) (/ 1 (tan (/ pi !n))) ))
    )
  )
;========================
; END cross-section-model
;========================

;========================
; Class: circular-section
;========================
(define-class circular-section
  :inherit-from (imprint-class cross-section-model)
  :properties (
               type 			'circular
               target-object 	^disc
               tool-object-list	(list ^p1)
               diameter 		(average ^width ^height)
               (disc :class 'disc-object
                   diameter ^^diameter
                   )
               (p1 :class 'point-object
                   coordinates (list (/ ^diameter 2) 0 0)
                   )
               )
  )
(define-method get-width circular-section ()
  !diameter
  )
(define-method get-height circular-section ()
  !diameter
  )
;=====================
; END circular-section
;=====================

;=============================
; Class: circular-tube-section
;=============================
(define-class circular-tube-section
  :inherit-from (imprint-class cross-section-model)
  :properties (
               type 			'circular-tube
               target-object 	^diff-object
               tool-object-list	(list ^p1 ^p2)

               outer-diameter 	(average ^width ^height)
               thickness 		(* 0.2 ^outer-diameter)
               inner-diameter	(- ^outer-diameter ^thickness)

               (p1 :class 'point-object
                   coordinates (list (/ ^outer-diameter 2) 0 0)
                   )
               (p2 :class 'point-object
                   coordinates (list (/ (- ^outer-diameter ^thickness) 2) 0 0)
                   )

               (diff-object :class 'difference-object
                   object-list (list ^outer-circular ^inner-circular)
                   simplify? t
                   )

               (outer-circular :class 'circular-section
                   diameter ^outer-diameter
                   )
               (inner-circular :class 'circular-section
                   diameter ^^inner-diameter
                   )
               )
  )
(define-method get-width circular-tube-section ()
  !outer-diameter
  )
(define-method get-height circular-tube-section ()
  !outer-diameter
  )
;==========================
; END circular-tube-section
;==========================

;===========================
; Class: rectangular-section
;===========================
(define-class rectangular-section
  :inherit-from (imprint-class cross-section-model )
  :properties (
               type 			'rectangular
               width 			(default 0.04)
               height 			(default 0.01)

               target-object 	^sheet
               tool-object-list	(list ^p1)

               (p1 :class 'point-object
                   coordinates (list (/ ^width 2) 0 0)
                   )
               (sheet :class 'sheet-object
                   width ^^width
                   height ^^height
                   )
               )
  )
(define-method get-width rectangular-section ()
  !width
  )
(define-method get-height rectangular-section ()
  !height
  )
;========================
; END rectangular-section
;========================

;================================
; Class: rectangular-tube-section
;================================
(define-class rectangular-tube-section
  :inherit-from (cross-section-model difference-object)
  :properties (
               type 		'rectangular-tube

               width 		(default 0.04)
               height 		(default 0.01)
               inner-width	(- ^^width ^thickness)
               inner-height	(- ^^height ^thickness)

               object-list 	(list ^outer-rectangle ^inner-rectangle)
               thickness 	(* 0.2 (average ^width ^height) )
               simplify? 	t

               (outer-rectangle :class 'sheet-object
                   width 	^^width
                   height 	^^height
                   )
               (inner-rectangle :class 'sheet-object
                   width 	^^inner-width
                   height 	^^inner-height
                   )
               )
  )
(define-method get-width rectangular-tube-section ()
  !width
  )

(define-method get-height rectangular-tube-section ()
  !height
  )
;=============================
; END rectangular-tube-section
;=============================

;================================
; Class: line-section definitions
;================================
(define-class line-section
  :inherit-from (line-object cross-section-model)
  :properties (
               type 	'line

               height 	(default 0.04)
               point1 	(list 0 (- (/ ^height 2)) 0)
               point2 	(list 0 (/ ^height 2) 0)
               )
  )

(define-method get-width line-section ()
  !height
  )

(define-method get-height line-section ()
  0
  )
;=============================
; END line-section definitions
;=============================

;======================
; Class: H-beam-section
;======================
(define-class H-beam-section
  :inherit-from (union-object cross-section-model)
  :properties (
               type 			'h-beam

               width 			(if ^optimization-object
                                  (get-width ^optimization-object)
                                (default 0.04)
                                )
               height 			(if ^optimization-object
                                  (get-height ^optimization-object)
                                (default 0.04)
                                )

               flange-thickness	(if ^optimization-object
                                     (get-flange ^optimization-object)
                                   (* 0.1 ^height)
                                   )
               web-thickness 	(if ^optimization-object
                                  (get-web ^optimization-object)
                                (* 0.1 ^width)
                                )
               object-list 		(list ^top-flange ^web ^bottom-flange)
               simplify? 		t

               (top-flange :class 'sheet-object
                   width 		^^width
                   height 		^^flange-thickness
                   orientation	(list
                                  (translate (list 0 (half ^^height) 0))
                                  )
                   )
               (web :class 'sheet-object
                   width 	^^web-thickness
                   height 	^^height
                   )
               (bottom-flange :class 'sheet-object
                   width 		^^width
                   height 		^^flange-thickness
                   orientation 	(list
                                  (translate (list 0 (- (half ^^height)) 0))
                                  )
                   )

               )
  )
(define-method get-width H-beam-section ()
  !height
  )
(define-method get-height H-beam-section ()
  (+ !width !flange-thickness)
  )
;===============================
; END H-beam-section definitions
;===============================

;======================
; Class: I-beam-section
;======================
(define-class I-beam-section
  :inherit-from (union-object cross-section-model)
  :properties (
               type 			'I-beam

               width 			(if ^optimization-object
                                  (get-width ^optimization-object)
                                (default 0.04)
                                )
               height 			(if ^optimization-object
                                  (get-height ^optimization-object)
                                (default 0.04)
                                )
               flange-thickness	(if ^optimization-object
                                     (get-flange ^optimization-object)
                                   (* 0.1 ^width)
                                   )
               web-thickness 	(if ^optimization-object
                                  (get-web ^optimization-object)
                                (* 0.1 ^height)
                                )

               second-moment-of-area	(calculate-second-moment-of-area-about-z-axis !superior)

               object-list 		(list ^left-flange ^web ^right-flange)
               simplify? 		t


               (right-flange :class 'sheet-object
                   width 		^^flange-thickness
                   height 		^^width
                   orientation 	(list
                                  (translate (list (half (+ ^^height ^^flange-thickness)) 0 0))
                                  )
                   )
               (web :class 'sheet-object
                   width 	^^height
                   height 	^^web-thickness
                   )
               (left-flange :class 'sheet-object
                   width 		^^flange-thickness
                   height 		^^width
                   orientation 	(list
                                  (translate (list (- (half (+ ^^height ^^flange-thickness))) 0 0))
                                  )
                   )
               )
  )
(define-method get-width I-beam-section ()
  (+ !flange-thickness !height)
  )
(define-method get-height I-beam-section ()
  !width
  )

(define-method calculate-second-moment-of-area-about-z-axis I-beam-section ()
  (+
   (+ (/ (* !width (expt !flange-thickness 3)) 6)
      (* 0.5 !flange-thickness !width (expt !height 2))
      (* (expt !flange-thickness 2) !width !height)
      (* 0.5 (expt !flange-thickness 3) !width))
   (/ (* !web-thickness (expt !height 3)) 12)
	)
  )

(define-method get-second-moment-of-area-about-z-axis I-beam-section ()
  !second-moment-of-area
  )
;===============================
; END I-beam-section definitions
;===============================

;=========================
; Class: polygonal-section
;=========================
(define-class polygonal-section
  :inherit-from (imprint-class cross-section-model)
  :properties (
               type 			'polygonal

               target-object 	^poly
               tool-object-list	(list ^p1)

               r 				(/ ^height 2)
               n        32
               (poly :class 'polygon-object
                     vertices (loop for i from 1 to ^n
                                    collect (list (* ^r (cos (/ (* 2 pi i) ^n))) (* ^r (sin (/ (* 2 pi i) ^n))) 0))

                     dimension 2
                   )
               (p1 :class 'point-object
                   coordinates (mid-point (nth 0 (the poly vertices)) (nth 1 (the poly vertices)))
                   )

               )
  )

  ;get-height = the diameter of the  circle
    (define-method get-width polygonal-section ()
      (let ((side-length (points-distance (nth 0 (the poly vertices)) (nth 1 (the poly vertices)))))
          (* side-length (/ 1 (sin (/ pi !n))))
      )
    )

  ;get-height = the diameter of the inscribed circle
  (define-method get-height polygonal-section ()
    (let ((side-length (points-distance (nth 0 (the poly vertices)) (nth 1 (the poly vertices)))))
        (* side-length (/ 1 (tan (/ pi !n))))
    )
  )
;==================================
; END polygonal-section definitions
;==================================
