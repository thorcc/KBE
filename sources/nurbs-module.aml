;To display the nurbs module run the following function:
;(display-nurbs-module)

(in-package :aml)

;;;; Model ;;;;

;Method to draw link (draw-link-wo-mesh (the main-mechanism-class links link-0000 link-geometry))




; (define-method get-points-list point-collection ()
;   !points-list
;   )
;
; (define-method get-weight-points point-collection ()
;   !weight-points
;   )
;
; (define-method get-ref-coord-sys point-collection ()
;   !ref-coord-sys
;   )
;
; (define-method smash-points-method point-collection ()
;   (smash-value !points-list)
;   )
;
; (define-method change-points-list point-collection (new-points-list)
;   (change-value !points-list new-points-list)
;   )
;
; (define-method change-weight-points point-collection (new-weight-points)
;     (progn
;       (smash-value !weight-points)
;       (change-value !weight-points new-weight-points)
;     )
;   )


;;;; Controller ;;;;



; (define-class nurbs-controller
;   :inherit-from(object)
;   :properties(
;           model-points (get-points-list (the point-collection))
;           model-weight (get-weight-points (the point-collection))
;           model-coord-sys (get-ref-coord-sys (the point-collection))
;         )
;   )
;
; (define-method get-controller-points nurbs-controller ()
;   !model-points
; )
; (define-method get-controller-weight nurbs-controller ()
;   !model-weight
; )
;
; (define-method get-controller-coord-sys nurbs-controller ()
;   !model-coord-sys
; )
;
; (define-method change-controller-weight nurbs-controller (new-weight-points)
;   (change-value !model-weight new-weight-points)
;   (change-weight-points (the point-collection) !model-weight)
; )
; (define-method change-controller-points nurbs-controller (new-points)
;   (change-value !model-points new-points)
;   (change-points-list (the point-collection) !model-points)
; )
;



;;;; View ;;;;


(define-class helping-points-class
  :inherit-from (object)
  :properties(
              points-list   (get-view-points-list (the interface forms link-editor))
              weight-points (get-view-weight (the interface forms link-editor))
              weight-points-coord (loop for w in ^weight-points
                                  collect (butlast w)
                                  )
              height        (* (points-distance (nth 0 ^points-list) (nth 1 ^points-list)) 0.03)
              width         ^height
              depth         (* ^height 0.1)
    )
  :subobjects(
            (ui-end-points :class series-object
            quantity 		(length ^^points-list)
            class-expression	'box-object
            series-prefix 	'p
            init-form '(
                        id 			^index
                        line-width 	4
                        color 		'green
                        height ^^height
                        width  ^^width
                        depth  ^^depth
                        orientation (list (translate (nth ^index ^^points-list)))
                       )
               )
               (ui-weight-points :class series-object
               quantity 		(length ^^weight-points)
               class-expression	'box-object
               series-prefix 	'w
               init-form '(
                           id 			^index
                           line-width 	4
                           color 		'red
                           height (* ^^height 0.1)
                           width  (* ^^width 0.1)
                           depth  (* ^^depth 0.1)
                           orientation (list (translate (nth ^index ^^weight-points-coord)))
                          )
                  )
              (ui-end-points-label :class series-object
                quantity 		(length ^^points-list)
                class-expression	'text-object
                series-prefix 	'plabel
                init-form '(
                  coordinates (list  (nth 0 (nth ^index ^^points-list))
                                     (+ (nth 1 (nth ^index ^^points-list)) ^^height)
                                     (nth 2 (nth ^index ^^points-list))
                                     )
                            text-string (if (oddp ^index) "End Point" "Start Point")
                           )
                )
              (ui-weight-points-label :class series-object
                quantity 		(length ^^weight-points-coord)
                class-expression	'text-object
                series-prefix 	'wlabel
                init-form '(
                            coordinates (list  (nth 0 (nth ^index ^^weight-points-coord))
                                               (+ (nth 1 (nth ^index ^^weight-points-coord)) ^^height)
                                               (nth 2 (nth ^index ^^weight-points-coord))
                                               )
                            text-string (write-to-string ^index)
                           )
                )
            )
)

 (define-method translate-weight-points helping-points-class ()
     (let   (
                 (point-number (mouse-select-point-from-display !weight-points-coord))
                 (point-instance (nth point-number (series-members (the ui-weight-points))))
                   )

                   (interactive-translate point-instance)
                   (change-model-weight-coords
                                                (the connection (:from (the interface forms link-editor member-selector selected-option)))
                                                point-number
                                                (nth 0 (the position (:from point-instance)))
                              )

              )
        )

(define-class link-editor-form-class
  :inherit-from(ui-form-class)
  :properties(
              ;background-color 'snow2
              label "NURBS Module"
              height (* 0.6 (nth 1 (get-screen-size)))
              width  (* 0.6 (nth 0 (get-screen-size)))
              y-offset (- ^height (* 0.5 ^height))
              x-offset (- ^width (* 0.5 ^width))


              weight-points (get-weight-points (the connection (:from (the member-selector selected-option))))
              weight-points-quantity (length ^weight-points)
              weight-points-coord (loop for w in ^weight-points
                                  collect (butlast w)
                                  )
              points-list (get-points-list (the connection (:from (the member-selector selected-option))))
              close-action (close-nurbs-module)
              )
  :subobjects(

              (canvas :class 'ui-canvas-class
                  measurement 'percentage
                  x-offset 32 y-offset 5 width 68 height 90
                  )
              (graphic-toolbar :class 'ui-graphic-control-toolbar-class
                  canvas-object ^canvas
                  measurement 'percentage
                  height 5
                  width 70
                  x-offset 30
                  y-offset 95
                  )

              (link-selector-label :class 'ui-label-class
                label "Selected Link"
                label-align :left
                y-offset 8
                x-offset 3
                height 5
                )
              (link-selector :class 'ui-option-menu-class
                Button1-action '(progn
                                        (update (the superior link-editor-form-class))
                                        (draw-member-curves)
                                        (zoom :all)
                                 )
                options-list (series-members (the main-mechanism-class links))
                labels-list (loop for member in (series-members (the main-mechanism-class links))
                                collect (the label (:from member))
                                 )
                selected-option (nth 0 ^options-list)
                y-offset 8
                x-offset 12
                height 5
               )

               (member-selector-label :class 'ui-label-class
                 label "Selected Member"
                 label-align :left
                 y-offset 13
                 x-offset 3
                 height 5
                 )
               (member-selector :class ui-option-menu-class
                 Button1-action '(progn
                                         (update (the superior link-editor-form-class))
                                         (draw-member-curves)
                                         ;(blink (the connection (:from ^selected-option)) 2 100)
                                  )
                 options-list  (series-members (the link-geometry sweeps (:from (the superior link-selector selected-option))))
                 labels-list (loop for i from 0 to (- (length ^options-list) 1)
                                    collect (format nil "Member ~a" i))
                 selected-option (nth 0 ^options-list)
                 y-offset 13
                 x-offset 12
                 height 5
                )

              (Sweep-action-button :class 'ui-action-button-class
                  measurement 'percentage
                  height 5
                  width 10
                  y-offset 18
                  x-offset 2
                  label "Sweep Link"
                  Button1-action '(progn
                                    (draw-link-wo-mesh (the link-geometry (:from (the interface forms link-editor link-selector selected-option))))
                                    (draw (the superior main-mechanism-class helping-points))
                                      )
                  )

              (undraw-all-button :class 'ui-action-button-class
                    measurement 'percentage
                    height 5
                    width 10
                    y-offset 18
                    x-offset 12
                    label "Undraw"
                    Button1-action (undraw (the main-mechanism-class))
                  )

            (draw-member-nurb-button :class 'ui-action-button-class
                measurement 'percentage
                height 5
                width 10
                y-offset 23
                x-offset 2
                label "Draw Curves"
                Button1-action '(draw-member-curves)
                )

            (sweep-member-nurb-button :class 'ui-action-button-class
                measurement 'percentage
                height 5
                width 10
                y-offset 23
                x-offset 12
                label "Sweep Member"
                Button1-action '(draw (the member-selector selected-option) :draw-subobjects? nil)
                )
              (move-point-action-button :class 'ui-action-button-class
                  measurement 'percentage
                  height 5
                  width 10
                  y-offset 28
                  x-offset 2
                  label "Move Weight Point"

                  Button1-action '(progn  (translate-weight-points (the superior main-mechanism-class helping-points))
                                          (update (the superior weight-sheet))
                                          (regen)
                                          (draw (the superior main-mechanism-class helping-points)))
                  )


                  (cross-section-selector-label :class 'ui-label-class
                    label "Member Cross-section"
                    label-align :left
                    y-offset 33
                    x-offset 3
                    height 5
                    )
                    (cross-section-start-label :class 'ui-label-class
                      label "Start Cross-section"
                      label-align :left
                      y-offset 38
                      x-offset 3
                      height 5
                      )

                 (cross-section-end-label :class 'ui-label-class
                   label "End Cross-section"
                   label-align :left
                   y-offset 43
                   x-offset 3
                   height 5
                   )

                  (start-cross-section-selector :class ui-option-menu-class
                    Button1-action '(progn
                                            (update (the superior link-editor-form-class))
                                            (draw-member-curves)
                                     )
                   options-list (reverse (class-direct-defined-subclasses 'cross-section-model))

                   labels-list (loop for option in !options-list
                                 collect (remove "-section" (write-to-string option))
                                 )
                   selected-option (nth
                                     (position
                                      (write-to-string (the type (:from (get-cross-section_D (the superior link-editor member-selector selected-option)))))
                                      !labels-list
                                      )
                                     !options-list)
                   y-offset 38
                   x-offset 12
                   height 5
                   width 10
                   )
                 (end-cross-section-selector :class ui-option-menu-class
                       Button1-action '(progn
                                               (update (the superior link-editor-form-class))
                                               (draw-member-curves)
                                        )
                      options-list (reverse (class-direct-defined-subclasses 'cross-section-model))
                      labels-list (loop for option in !options-list
                                    collect (remove "-section" (write-to-string option))
                                    )
                     selected-option(nth
                                      (position
                                        (write-to-string (the type (:from (get-cross-section_A (the superior link-editor member-selector selected-option)))))
                                        !labels-list
                                       )
                                     !options-list)
                      y-offset 43
                      x-offset 12
                      height 5
                      width 10
                   )

                 (cs-width-label :class 'ui-label-class
                   label "w"
                   y-offset 33
                   x-offset 22
                   height 5
                   width 3
                   )
                 (cs-height-label :class 'ui-label-class
                   label "h"
                   y-offset 33
                   x-offset 25
                   height 5
                   width 3
                   )

                   (start-width :Class 'ui-typein-field-class
                    x-offset 22 y-offset 38 width 3 height 5
                    editable? t
                    model-property-object (the width (:from (the superior link-editor member-selector selected-option)))
                    content       ^model-property-object
                    ; accept-content-function '(change-cross-section-start-width (the superior link-editor member-selector selected-option) (get-value (the superior)))
                    ; cancel-action '(smash-value ^content)
                    Focusout-validation? t
                    )

                   (start-height :Class 'ui-typein-field-class
                    x-offset 25 y-offset 38 width 3 height 5
                    model-property-object (the height (:from (the superior link-editor member-selector selected-option)))
                    content       ^model-property-object
                    ; validation-function '(change-cross-section-start-height (the superior link-editor member-selector selected-option) (get-value (the superior)))
                    ; cancel-action '(smash-value ^content)
                    Focusout-validation? t
                    )

                  (start-cs-apply :Class 'ui-action-button-class
                    x-offset 28 y-offset 38 width 3 height 5
                    Button1-action (progn
                                       (change-cross-section-start-width
                                        (the superior link-editor member-selector selected-option)
                                        (get-value (the superior link-editor start-width)))
                                       (change-cross-section-start-height
                                         (the superior link-editor member-selector selected-option)
                                         (get-value (the superior link-editor start-height)))
                                       (change-cross-section_D
                                         (the superior link-editor member-selector selected-option)
                                         (the superior link-editor start-cross-section-selector selected-option))
                                       (regen)
                                        )
                    image (concatenate (logical-path :ui-bitmaps) "apply.bmp")
                   )

                  (end-width :Class 'ui-typein-field-class
                   x-offset 22 y-offset 43 width 3 height 5
                   model-property-object (the width-end (:from (the superior link-editor member-selector selected-option)))
                   content       ^model-property-object
                   apply-action '(change-cross-section-end-width (the superior link-editor member-selector selected-option) (get-value (the superior)))
                   cancel-action '(smash-value ^content)
                   Focusout-validation? t
                   )

                  (end-height :Class 'ui-typein-field-class
                   x-offset 25 y-offset 43 width 3 height 5
                   model-property-object (the height-end (:from (the superior link-editor member-selector selected-option)))
                   content       ^model-property-object
                   apply-action '(change-cross-section-end-height (the superior link-editor member-selector selected-option) (get-value (the superior)))
                   cancel-action '(smash-value ^content)
                   Focusout-validation? t
                   )
                   (end-cs-apply :Class 'ui-action-button-class
                     x-offset 28 y-offset 43 width 3 height 5
                     Button1-action (progn
                                       (change-cross-section-end-width
                                         (the superior link-editor member-selector selected-option)
                                         (get-value (the superior link-editor end-width)))
                                        (change-cross-section-end-height
                                          (the superior link-editor member-selector selected-option)
                                          (get-value (the superior link-editor end-height)))
                                        (change-cross-section_D
                                          (the superior link-editor member-selector selected-option)
                                          (the superior link-editor start-cross-section-selector selected-option))
                                        (regen)
                                         )
                     image (concatenate (logical-path :ui-bitmaps) "apply.bmp")
                    )



              (point-sheet-label :class 'ui-label-class
                label "Start/End point"
                label-align :left
                y-offset 48
                x-offset 3
                height 5
                )
              (point-sheet :class 'ui-spreadsheet-class
                  measurement 'percentage
                  x-offset 2
                  y-offset 53
                  width 21
                  height 12
                  column-labels (list "x-coord" "y-coord" "z-coord")
                  row-labels (list "Start point" "End point")
                  cell-values ^^points-list
                  number-of-columns (length ^column-labels)
                  number-of-rows 2
                  row-height   25
                  column-width 53
                  attachment-info-list '(top bottom left right)
                  editable? t

                  )
                  (weight-sheet-label :class 'ui-label-class
                    label "Weight points"
                    label-align :left
                    y-offset 66
                    x-offset 3
                    height 5
                    )
              (weight-sheet :class 'ui-spreadsheet-class
                  measurement 'percentage
                  x-offset 2
                  y-offset 71
                  width 22
                  height 24
                  column-labels (list "x-coord" "y-coord" "z-coord" "weight")
                  row-labels (loop for row from 0 to ^^weight-points-quantity
                                collect (format nil "Point ~a" row)
                                 )
                  cell-values ^^weight-points
                  number-of-columns (length ^column-labels)
                  number-of-rows ^^weight-points-quantity
                  row-height   25
                  column-width 50
                  attachment-info-list '(top bottom left right)
                  editable? t

                  )
              (toolbar :class 'ui-toolbar-class
                  measurement 'percentage
                  height 5
                  width 20
                  y-offset 95
                  x-offset 7
                  Availability-list nil
                  Button1-action-list '((weight-sheet-apply (the superior link-editor-form-class))
                                         (weight-sheet-add-row (the superior link-editor-form-class))
                                         (weight-sheet-remove-row (the superior link-editor-form-class))
                                         )
                  Button3-action-list nil
                  Images-list (list (concatenate (logical-path :ui-bitmaps) "apply.bmp") (concatenate (logical-path :ui-bitmaps) "add-object.bmp") (concatenate (logical-path :ui-bitmaps) "delete-object.bmp"))
                  Labels-list (list "Apply" "Add node" "Remove node")
                  Number-of-buttons (length ^Button1-action-list)
                  Orient (nth 0 '(:horizontal :vertical))
                  Tooltips-list nil
                  )
              )
  )



(define-method weight-sheet-apply link-editor-form-class ()
  (progn
    (change-model-weight
                                 (the connection (:from (the interface forms link-editor member-selector selected-option)))
                                 (loop for row from 0 to (- (the weight-sheet number-of-rows) 1)
                                        collect (loop for cell from 0 to 3
                                                  collect (read-from-string (get-cell-value (the weight-sheet) row cell))
                                                  )
                                            )
      )
    (update (the weight-sheet))
    (regen)
    (draw-member-curves)
    )
  )

(define-method weight-sheet-add-row link-editor-form-class ()
  (progn
    (change-model-weight
                                 (the connection (:from (the interface forms link-editor member-selector selected-option)))
                                (append
                                  (loop for row from 0 to (- (the weight-sheet number-of-rows) 1)
                                       collect (loop for cell from 0 to 3
                                                     collect (read-from-string (get-cell-value (the weight-sheet) row cell))
                                                   )
                                    )
                                  (list (append (get-new-wpoint-coords (the)) (list 1)))
                                 )
            )
     (update (the weight-sheet))
     (regen)
     (draw-member-curves)
    )
  )

(define-method weight-sheet-remove-row link-editor-form-class ()
  (progn
        (change-model-weight
                           (the connection (:from (the interface forms link-editor member-selector selected-option)))
                           (butlast (loop for row from 0 to (- (the weight-sheet number-of-rows) 1)
                                           collect (loop for cell from 0 to 3
                                                         collect (read-from-string (get-cell-value (the weight-sheet) row cell))
                                                               )
                                                        ))
        )
     (update (the weight-sheet))
     (regen)
     (draw-member-curves)
    )
  )

(define-method get-view-weight link-editor-form-class ()
  !weight-points
 )
(define-method get-view-weight-coords link-editor-form-class ()
   !weight-points-coord
  )
(define-method get-view-points-list link-editor-form-class ()
  !points-list
 )

(define-method get-new-wpoint-coords link-editor-form-class ()
  (if (get-view-weight-coords (the))
    (mid-point (nth 1 (get-view-points-list (the))) (nth (- (LENGTH (get-view-weight-coords (the))) 1) (get-view-weight-coords (the))))
    (mid-point (nth 0 (get-view-points-list (the))) (nth 1 (get-view-points-list (the))))
   )
 )

(define-method get-selected-link  link-editor-form-class ()
  (the link-selector selected-option)
 )

(define-method get-selected-member  link-editor-form-class ()
  (the member-selector selected-option)
 )

(defun draw-member-curves ()
            (undraw (the main-mechanism-class))
            (draw (the superior main-mechanism-class helping-points))
            (loop for member in (series-members (the link-geometry sweeps (:from (the interface forms link-editor link-selector selected-option))))
                          do (progn (draw (the connection (:from member)) :draw-subobjects? nil)
                                    (change-color (the connection (:from member)) 'white)
                                  )
                )
            (change-color (the connection (:from (the interface forms link-editor member-selector selected-option))) 'red)
)

(defun display-nurbs-module ()
      ;(create-model 'point-collection)
      ; (create-model 'nurbs-controller)
      (add-object (the) 'helping-points 'helping-points-class)
      (add-object (the interface forms) 'link-editor 'link-editor-form-class)
      (display (the interface forms link-editor))
      (activate-display (the interface forms link-editor canvas))
      (add-light :name 'light1 :color 'white :x 0.7 :y 0.5 :z -0.3)
      (draw-member-curves)
      (change-color (the connection (:from (the interface forms link-editor member-selector selected-option))) 'red)
      (zoom :all)
      ;(set-current-display-background-color 'grey49)
   )
(defun close-nurbs-module ()
     (hide (the interface forms link-editor))
     (delete-object (the main-mechanism-class helping-points))
     (delete-object (the interface forms link-editor))
     (delete-current-display-lights)
     (activate-display (the model-manager interface sketcher-layout-form-class sketcher-main-form sketcher-main-form work-area-canvas-form canvas canvas canvas canvas))
     (regen)
  )
