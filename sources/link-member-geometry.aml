;============================================================================
; Class: connection-model
; Creates a NURBS curve between two endpoints, using Sheth-Uicker definitions
;============================================================================
(define-class connection-model
  :inherit-from (nurb-curve-object)
  :properties (
               pij (convert-coords ^frame_D '(0 0 0) :from :local :to :global)
               wij (convert-vector ^frame_D '(0 0 1) :from :local :to :global)

               pjk (convert-coords ^frame_A '(0 0 0) :from :local :to :global)
               wjk (convert-vector ^frame_A '(0 0 1) :from :local :to :global)

               start-point (the origin (:from ^frame_D))
               end-point (the origin (:from ^frame_A))

               middle-points (case ^line-config
                               ('paralell (let (
                                                (start-tangent (add-vectors ^start-point (multiply-vector-by-scalar
                                                                                          (normalize ^perpendicular-dir) (half ^param_b) ) ))
                                                (end-tangent (add-vectors ^end-point (multiply-vector-by-scalar
                                                                                      (normalize ^perpendicular-dir) (- (half ^param_b)) ) ))
                                                (start-weight (list 0.5))
                                                (end-weight (list 0.5))
                                                )
                                            (if (roughly-same-point start-tangent end-tangent)
                                                (list (append start-tangent start-weight) )
                                              (list (append start-tangent start-weight) (append end-tangent end-weight) )
                                              )
                                            ) )
                               ('intersecting (let (
                                                    (center (nth 0 ^inter_points ))

                                                    (middle-point (add-vectors center (multiply-vector-by-scalar (normalize
                                                                                                                  (add-vectors (subtract-vectors ^start-point center)
                                                                                                                               (subtract-vectors ^end-point center ))) ^param_a) ) )
                                                    (angle-start-middle (/ (angle-between-2-vectors
                                                                            (subtract-vectors ^start-point center)
                                                                            (subtract-vectors middle-point center )) 2 ))
                                                    (start-tangent (add-vectors center (multiply-vector-by-scalar
                                                                                        (normalize (add-vectors (subtract-vectors ^start-point center)
                                                                                                                (subtract-vectors middle-point center )))
                                                                                        (/ ^param_a (cosd angle-start-middle))) ) )

                                                    (angle-middle-end (/ (angle-between-2-vectors
                                                                          (subtract-vectors middle-point center)
                                                                          (subtract-vectors ^end-point center )) 2))
                                                    (end-tangent (add-vectors center (multiply-vector-by-scalar
                                                                                      (normalize (add-vectors (subtract-vectors middle-point center)
                                                                                                              (subtract-vectors ^end-point center )))
                                                                                      (/ ^param_a (cosd angle-middle-end))) ) )

                                                    (start-weight (list (sind (/ (angle-between-2-vectors
                                                                                  (subtract-vectors start-tangent ^start-point)
                                                                                  (subtract-vectors start-tangent middle-point)
                                                                                  ) 2) ) ) )
                                                    (middle-weight (list 1))
                                                    (end-weight (list (sind (/ (angle-between-2-vectors
                                                                                (subtract-vectors end-tangent middle-point)
                                                                                (subtract-vectors end-tangent ^end-point)
                                                                                ) 2) ) ) )
                                                    )
                                                (list (append start-tangent start-weight) (append middle-point middle-weight)
                                                      (append end-tangent end-weight) )
                                                )
                                              )
                               )
               start-weight (list (append ^start-point (list 1)))
               end-weight (list (append ^end-point (list 1)))
               points-list (list ^start-point ^end-point)


               weight (append (the weight-list (:from ^shape-ref))
                                     (make-sequence 'list (- (length (the point-list (:from ^shape-ref)))
                                                             (length (the weight-list (:from ^shape-ref)))) :initial-element 1)
                                     )

               weight-points (loop for p-index in (the point-list (:from ^shape-ref))
                               for w in ^weight
                               collect (append (the coordinates (:from
                                                                 (nth p-index ^point-ref-list)) ) (list w)) )
               points (if ^weight-points
                        (append ^start-weight ^weight-points ^end-weight)
                        (append ^start-weight ^middle-points ^end-weight)
                       )

              ;  points (let (
              ;               (shape-points (loop for p-index in (the point-list (:from ^shape-ref))
              ;                               for w in ^weight-points
              ;                               collect (append (the coordinates (:from
              ;                                                                 (nth p-index ^point-ref-list)) ) (list w)) ))
              ;               )
              ;           (if shape-points
              ;               (append ^start-weight shape-points ^end-weight)
              ;             (append ^start-weight ^middle-points ^end-weight)
              ;             )
              ;           )
               rational? t
               homogeneous? t
                                        ;degree 2

               line-config (line-pose (the superior))
               inter_points (inter_section (the superior) ^line-config )
               perpendicular-dir (perp-dir (the superior) ^line-config )

               param_a (vector-length (subtract-vectors (the origin (:from ^frame_A))
                                                        (the origin (:from ^frame_B))))
               param_b (vector-length (subtract-vectors (the origin (:from ^frame_B))
                                                        (the origin (:from ^frame_C))))
               param_c (vector-length (subtract-vectors (the origin (:from ^frame_C))
                                                        (the origin (:from ^frame_D))))

               )
  :subobjects (
               ;;cross section at start of spline
               (spline-frame_start :class 'frame-data-model
                   point-ref ^point-ref_D
                   z-vector-ref ^z-vector-ref_D

                   (x-vector-ref :class 'vector-data-model
                                 direction (subtract-vectors (nth 1 ^points)  (nth 0 ^points))
                                 )
                   )
               ;;cross section at end of spline
               (spline-frame_end :class 'frame-data-model

                   point-ref ^point-ref_A
                   z-vector-ref ^z-vector-ref_A

                   (x-vector-ref :class 'vector-data-model
                                 direction (subtract-vectors (nth (1- (length ^points)) ^points)
                                                             (nth (- (length ^points) 2) ^points))
                                 )
                   )
               ;;augumented frames from SU-convention
               (frame_B :class 'frame-data-model
                   (point-ref :class 'point-data-model
                              coordinates (nth 0 ^^^inter_points)
                              )
                   (z-vector-ref :class 'vector-data-model
                                 direction ^^wij
                                 )
                   (x-vector-ref :class 'vector-data-model
                                 direction ^^perpendicular-dir
                                 )
                   )

               (frame_C :class 'frame-data-model
                   (point-ref :class 'point-data-model
                              coordinates (nth 1 ^^^inter_points)
                              )
                   (z-vector-ref :class 'vector-data-model
                                 direction ^^wjk
                                 )
                   (x-vector-ref :class 'vector-data-model
                                 direction ^^perpendicular-dir
                                 )
                   )

               )
  )

(define-method get-spline-frame_start connection-model ()
  !spline-frame_start
  )

(define-method get-spline-frame_end connection-model ()
  !spline-frame_end
  )

(define-method get-start-weight connection-model ()
  !start-weight
  )

(define-method get-points-list connection-model ()
  !points-list
  )

(define-method get-weight-points connection-model ()
  !weight-points
  )
(define-method change-model-weight-coords connection-model (point-number position)
      (change-value !weight-points (let
                                  ((weight-points !weight-points)
                                   (new-point (let ((l1 (nth point-number weight-points)) (l2 position)) (replace l1 l2) l1))
                                   )
                                  (replace (nth point-number weight-points) new-point)
                                  (smash-value !weight-points)
                                  weight-points
                                  )

               )

   )

(define-method change-model-weight connection-model (new-weight-points)
 (change-value !weight-points new-weight-points)
  )
;=================================================================
; Finds the middle point between p1 and p2, given the direction d1
;=================================================================
(defun m-point (p1 d1 p2)
  (add-vectors p1 (proj_v d1 (multiply-vector-by-scalar (subtract-vectors p2 p1) 0.5) ) )
  )

;================================
; Finds the closest point from p1
;================================
(defun cl-point (p1 d1 p2 d2)
  (let (
        (n1x (cross-product d1 d2))
        (n1d (dot-product n1x (cross-product p2 d2)) )
        (n2d (dot-product n1x (cross-product p1 d2)) )
        (d1s (dot-product n1x n1x))

        (l1s (multiply-vector-by-scalar d1 (/ n1d d1s)))
        (l2s (multiply-vector-by-scalar d1 (/ n2d d1s)))

        )
    (add-vectors p1 (subtract-vectors l1s l2s))
    )
  )

;=============================================================
;Determine configuration of two lines in relation to eachother
;=============================================================
(define-method line-pose connection-model ()
  (let (
        (v0_1 (cross-product !pij !wij) )
        (v0_2 (cross-product !pij !wij) )
        (coplan  (* 0.5  (+ (dot-product !wij v0_2) (dot-product v0_1 !wjk)) ))

        (normal-mag (vector-length (cross-product !wij !wjk) ) )
        (coincident (vector-length (cross-product (subtract-vectors !pjk !pij) !wij) ) )
        )
    (if (/= 0 coplan) 'skew (if (/= 0 normal-mag) 'intersecting (if (= 0 coincident) 'coincident 'paralell)))
    )
  )

;=========================================================
; Generalized closest points
; If lines Gij Gjk are intersecting or skew: closest point
; If lines Gij Gjk are coincident or parallel: mid-point
; Calculate intersection between lines
;=========================================================
(define-method inter_section connection-model (line-config)
  (case line-config
    ('skew
     )
    (list (cl-point !pij !wij !pjk !wjk) (cl-point !pjk !wjk !pij !wij) )
    ('intersecting
     (list (cl-point !pij !wij !pjk !wjk) (cl-point !pjk !wjk !pij !wij) )
     )
    ('coincident
     (list (m-point !pij !wij !pjk) (m-point !pjk !wjk !pij) )
     )
    ('paralell
     (list (m-point !pij !wij !pjk) (m-point !pjk !wjk !pij) )
     )
    )
  )
;============================================
; Returns generalized perpendicular direction
;============================================
(define-method perp-dir connection-model (line-config)
  (let (
        (cross (cross-product !wij !wjk) )
        (ortho-comp (orthogonal-projection-complement !wij (subtract-vectors !pjk !pij)) )
        )
    (case line-config
      ('skew cross )
      ('intersecting cross )
      ('coincident (read-from-string (pop-up-text-prompt
                                      :nb-entries 1
                                      :title "Please specify direction"
                                      :prompt "Type in x-vector"
                                      :init-text "(1 0 0)"
                                      :x-offset (/ (nth 0 (get-screen-size)) 2)
                                      :y-offset (/ (nth 1 (get-screen-size)) 2))))
      ('paralell ortho-comp )
      )
    )
  )


;============================================================================
; Returns the orthogonal projection of a vector b onto some vector a, pi_a(b)
;============================================================================
(defun proj_v (a b)
  (multiply-vector-by-scalar a (/ (dot-product b a ) (dot-product a a )) )
  )

;==================================================================
; Returns the orthogonal projection of vector b into the orthogonal
; complement of vector a, tau_a(b)
;==================================================================
(defun orthogonal-projection-complement (a b)
  (subtract-vectors b (proj_v a b) )
  )

;=================================
; END connection-model definitions
;=================================

;=======================================================
; Class: member-solid-model
; Creates the link cross-section sweep for a link member
;=======================================================
(define-class member-solid-model
  :inherit-from (tagging-object general-sweep-class)
  :properties(
              mesh-size-factor (default 0.25);;25% of the member's smallest dimension
              (mesh-element-size :class 'editable-data-property-class
                  formula (calculate-mesh-size (the superior))
                  label "Mesh element size"
                  )

              tag-dimensions '(1 2 3)
              tag-attributes (list ^mesh-element-size .1
                                   0 0.1 0 20.0 1.0e-5)

              (display? :class 'flag-property-class
                  formula (when (the cross-section-type (:from ^shape-ref)) t)
                  )

              joints-on-member nil;;List of the two joint elements on the member
              frame_D (the sub-frame (:from (nth 0 ^joints-on-member) ))
              frame_A (the sub-frame (:from (nth 1 ^joints-on-member) ))
              point-ref_D (the point-ref (:from ^frame_D ))
              point-ref_A (the point-ref (:from ^frame_A ))

              ;;test for "link twist"
              z-vector-ref_A (if (is-vectors-dependent (get-z-vector-ref_A ^frame_A)
                                                       (get-z-vector-ref_D ^frame_D) (get-x-vector-ref_D ^connection))
                                 ;;test for opposite joint directions
                                 (if (is-joint-directions-opposite
                                      (get-z-vector-ref_A ^frame_A) (get-z-vector-ref_D ^frame_D)
                                      (get-x-vector-ref_A ^connection) (get-x-vector-ref_D ^connection))
                                     (the z-vector-ref (:from ^frame_D))
                                   (the z-vector-ref (:from ^frame_A))
                                   )
                               (the z-vector-ref (:from ^frame_D))
                               )
              z-vector-ref_D (the z-vector-ref (:from ^frame_D ))

              ;;cross section dimension, width 0.04 / height 0.04
              shape-ref nil
              width (nth 0 (the solid-dimensions (:from ^shape-ref)))
              height (if (< 1 (length (the solid-dimensions (:from ^shape-ref))))
                         (nth 1 (the solid-dimensions (:from ^shape-ref)))
                       (nth 0 (the solid-dimensions (:from ^shape-ref)))
                       )
              width-end (if (< 2 (length (the solid-dimensions (:from ^shape-ref))))
                            (nth 2 (the solid-dimensions (:from ^shape-ref)))
                          (nth 0 (the solid-dimensions (:from ^shape-ref)))
                          )
              height-end (if (< 3 (length (the solid-dimensions (:from ^shape-ref))))
                             (nth 3 (the solid-dimensions (:from ^shape-ref)))
                           (nth 1 (the solid-dimensions (:from ^shape-ref)))
                           )

              ;;; Sweep parameters
              profile-objects-list (list
                                    ^cross-section_D
                                    ^cross-section_A
                                    )
              path-points-coords-list (list
                                       (the origin (:from ^frame_D))
                                       (the origin (:from ^frame_A))
                                       )

              profile-match-points-coords-list (list
                                                (vertex-of-object ^cross-section_D)
                                                (vertex-of-object ^cross-section_A)
                                                )

              path-object ^connection
              tangential-sweep? t

              ;;; If two cross-sections, only nil works, with one cross-section t gives best mesh
              simplify? nil
              render 'shaded

              ;;; cross-section selection
              (cross-section-type :class 'option-property-class
                  label "Cross-section Type"
                  mode 'menu
                  formula (if (the cross-section-type (:from ^shape-ref))
                              (nth (position (write-to-string (the cross-section-type (:from ^shape-ref)))
                                             !labels-list)  !options-list)
                            (nth (position (write-to-string (the cross-section-type (:from ^default-shape)))
                                           !labels-list)  !options-list) )
                  options-list (reverse (class-direct-defined-subclasses 'cross-section-model))
                  labels-list (loop for option in !options-list
                                collect (remove "-section" (write-to-string option))
                                )
                  )

              optimization-object	(default nil)

              property-objects-list (list
                                     (list (the superior cross-section-type self)
                                           '(automatic-apply? t)
                                           )
                                     '("Set cross-section" (button1-parameters :set-c button3-parameters
                                                                               :set-c)
                                       ui-work-area-action-button-class)

                                     (the superior width self)
                                     (the superior height self)
                                     (the superior width-end self)
                                     (the superior height-end self)
                                     (list (the superior display? self)
                                           '(automatic-apply? t))
                                     '("Draw..." (button1-parameters :draw button3-parameters :draw)
                                       ui-work-area-action-button-class)
                                     '("Undraw..." (button1-parameters :undraw button3-parameters :undraw)
                                       ui-work-area-action-button-class)
                                     ""
                                     (list (the superior mesh-element-size self)
                                           '(automatic-apply? t))
                                     )
              )
  :subobjects (
               (connection :class 'connection-model
                   )

               (cross-section_D :class !cross-section-type
                   reference-object 	(the spline-frame_start (:from ^connection))
                   orientation 			(list
                                        (rotate 90 :x-axis)
                                        (rotate 90 :z-axis)
                                        )
                   optimization-object	^^optimization-object
                   )
               (cross-section_A :class !cross-section-type
                   width 				(if ^optimization-object
                                        (get-width ^optimization-object)
                                      ^width-end)
                   height 				(if ^optimization-object
                                        (get-height ^optimization-object)
                                      ^height-end)
                   reference-object 	(the spline-frame_end (:from ^connection))
                   orientation 			(list
                                        (rotate 90 :x-axis)
                                        (rotate 90 :z-axis)
                                        )
                   optimization-object 	^^optimization-object
                   )
               )
  )

(define-method get-z-vector-ref_A sub-frame-data-model ()
  (the direction (:from !z-vector-ref ))
  )

(define-method get-z-vector-ref_D sub-frame-data-model ()
  (the direction (:from !z-vector-ref))
  )

(define-method get-x-vector-ref_D connection-model ()
  (the direction (:from (the x-vector-ref (:from !spline-frame_start))))
  )
(define-method get-x-vector-ref_A connection-model ()
  (the direction (:from (the x-vector-ref (:from !spline-frame_end))))
  )

(define-method get-cross-section_D member-solid-model ()
  !cross-section_D
  )

(define-method get-connection member-solid-model ()
  !connection
  )

(define-method is-displayed? member-solid-model ()
  !display?
  )

(define-method get-joints-on-member member-solid-model ()
  (when !joints-on-member
    !joints-on-member)
  )

;=====================================================================================================
; Returns the smallest dimension of a member times a mesh scaling factor defined in member-solid-model
;=====================================================================================================
(define-method calculate-mesh-size member-solid-model ()
  (* (min !width !height !width-end !height-end) !mesh-size-factor)
  )

;=====================================================================
; Returns the members width and height for a given joint-element-model
;=====================================================================
(define-method get-max-dimensions member-solid-model (joint-element)
  (let (
		  (pos (position joint-element (get-joints-on-member (the))))
		  (width (if pos
                   (get-width (get-cross-section-at-joint-element (the) joint-element))
                 0));;A joint not on the member might be sent as input
        ;;In that case, return 0
		  (height (if pos
                    (get-height (get-cross-section-at-joint-element (the) joint-element))
                  0))
		  )
    (list width height)
    )
  )

;====================================================
; Returns the member cross-section at a joint element
;====================================================
(define-method get-cross-section-at-joint-element member-solid-model (joint-element)
  (if (= 0 (position joint-element (get-joints-on-member (the))))
		!cross-section_D
    !cross-section_A
    )
  )

(define-method get-spline-frame-at-joint-element member-solid-model (joint-element)
  (if (= 0 (position joint-element (get-joints-on-member (the))))
		(get-spline-frame_start !connection)
    (get-spline-frame_end !connection)
    )
  )

;=================================================
; Left-click button methods for member-solid-model
;=================================================
(define-method work-area-button1-action member-solid-model (params)
  (case params
	 (:set-c
                                        ;(draw self :draw-subobjects? nil)
     )
    (:draw
     (draw self :draw-subobjects? nil)
     )
    (:undraw
     (undraw self :subobjects? nil)
     )
    )
  )

;==================================================
; Right-click button methods for member-solid-model
;==================================================
(define-method work-area-button3-action member-solid-model (params)
  (case params
    (:draw
     (draw self :draw-subobjects? t)
     )
    (:undraw
     (undraw self :subobjects? t)
     )
    )
  )

;===================================================
; Checks whether vector v1 is linear independent to,
; the plane defined by the vectors pv1 and pv2
;===================================================
(defun is-vectors-dependent (v1 pv1 pv2)
  (line-is-in-plane '(0 0 0) v1 '(0 0 0) (cross-product pv1 pv2))
  )

;===================================================
; Checks whether the joint directions z1 and z2 is
; opposite when the x-vector (sweeping direction)
; is the same.
;===================================================
(defun is-joint-directions-opposite (z1 z2 x1 x2)
  (and (equal (nth 2 z1) (- (nth 2 z2)))
       (equal (round-point (every-but-last x1) 3) (round-point (every-but-last x2) 3)))
  )

;==========================================
; Returns every element of list except last
;==========================================
(defun every-but-last (list)
  (loop for l on list
    while (rest l)
    collect (first l))
  )
;===================================
; END member-solid-model definitions
;===================================

;======================================================
; Class: members-on-link-collection
; Instantiates every member on a link as series-objects
;======================================================
(define-class members-on-link-collection
  :inherit-from (series-object)
  :properties (
               shapes-on-link		(default nil)

               quantity 			(length ^connection-between-2-constraints-combinations)
               class-expression		'member-solid-model
               series-prefix 		'member
               optimization-object 	(default nil)
               init-form '(
                           joints-on-member		(nth ^index ^^connection-between-2-constraints-combinations)
                           shape-ref 			(nth ^index ^shapes-on-link)
                           optimization-object	^^optimization-object
                           )
               )
  )

;===========================================
; END members-on-link-collection definitions
;===========================================
