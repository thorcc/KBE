;(progn (add-object (the interface forms) 'point-editor 'mechanism-user-io) (display (the interface forms point-editor)))

(define-class point-editor-widget
  :inherit-from(ui-form-class)
  :properties(
              label "Edit nodes"
              measurement 'pixels
              width 320
              height 350
              x-offset 40
              y-offset 40


              loaded-coords-list (get-points-list (the main-mechanism-class points))
              coords-quantity (length ^loaded-coords-list)

              )
  :subobjects(
              (sheet :class '(ui-spreadsheet-class)
                  measurement 'percentage
                  x-offset 5
                  y-offset 5
                  width 90
                  height 80




                  column-labels (list "Name" "x-coord" "y-coord" "z-coord")
                  row-labels (loop for row from 0 to ^^coords-quantity
                               collect (format nil "Node ~a"
                                               (- row 1)
                                               )
                               )
                  cell-values ^^loaded-coords-list
                  number-of-columns (length ^column-labels)
                  number-of-rows ^^coords-quantity
                  row-height   25
                  column-width 60
                  attachment-info-list '(top bottom left right)
                  editable? t

                  )
              (toolbar :class ui-toolbar-class
                  measurement 'percentage
                  height 10
                  width 20
                  y-offset 90
                  x-offset 70
                  Availability-list nil
                  Button1-action-list '(
                                         (progn
                                           (change-value
                                            ^^loaded-coords-list
                                            (loop for row from 0 to (- ^^coords-quantity 1)
                                              collect (loop for cell from 0 to 3
                                                        collect (read-from-string (get-cell-value (the superior sheet) row cell))
                                                        )
                                              )
                                            )
                                           (change-points-list (the main-mechanism-class points) ^^loaded-coords-list)
                                            (update (the superior sheet))
                                           (hide (the superior point-editor))
                                          )
                                        (progn (change-value
                                                 ^^loaded-coords-list
                                                 (loop for row from 0 to (- ^^coords-quantity 1)
                                                   collect (loop for cell from 0 to 3
                                                             collect (read-from-string (get-cell-value (the superior sheet) row cell))
                                                             )
                                                   )
                                                 )
                                                (change-points-list (the main-mechanism-class points) ^^loaded-coords-list)
                                                (change-value ^^coords-quantity (+ ^^coords-quantity 1))
                                                (update (the superior sheet))
                                                )
                                        (progn
                                          (change-value
                                           ^^loaded-coords-list
                                           (loop for row from 0 to (- ^^coords-quantity 1)
                                             collect (loop for cell from 0 to 3
                                                       collect (read-from-string (get-cell-value (the superior sheet) row cell))
                                                       )
                                             )
                                           )
                                          (change-points-list (the main-mechanism-class points) ^^loaded-coords-list)
                                          (change-value ^^coords-quantity (- ^^coords-quantity 1))
                                          (update (the superior sheet))
                                          )
                                        )
                  Button3-action-list nil
                  Images-list (list (concatenate (logical-path :ui-bitmaps) "apply.bmp") (concatenate (logical-path :ui-bitmaps) "add-object.bmp") (concatenate (logical-path :ui-bitmaps) "delete-object.bmp"))
                  Labels-list (list "Apply" "Add node" "Remove node")
                  Number-of-buttons (length ^Button1-action-list)
                  Orient (nth 0 '(:horizontal :vertical))
                  Tooltips-list nil
                  )
              )
  )

(define-method change-points-list point-collection (new-points-list)
    (change-value !points-list new-points-list)
  )


  (define-class general-appearance-widget-class
    :inherit-from(ui-form-class)
    :properties(
                label "General Appearance"
                measurement 'pixels
                width 320
                height 350
                x-offset 40
                y-offset 40

                )
    :subobjects(
                (ok-action-button :class ui-action-button-class
                  measurement 'percentage
                  height 10
                  width 40
                  y-offset 10
                  x-offset 20
                  label "Ok"
                  Button1-action '(hide (the superior general-appearance))
                  )
                (draw-labels-action-button :class ui-action-button-class
                  measurement 'percentage
                  height 10
                  width 40
                  y-offset 20
                  x-offset 20
                  label "Draw Node Labels"
                  Button1-action (loop for label in (get-node-labels (the main-mechanism-class points node-label)) do
                                      (draw label)
                                    )
                  Button3-action (loop for label in (get-node-labels (the main-mechanism-class points node-label)) do
                                      (draw label)
                                    )
                  )
                  (bigger-labels-action-button :class ui-action-button-class
                    measurement 'percentage
                    height 10
                    width 10
                    y-offset 20
                    x-offset 60
                    label "+"
                    Button1-action '(progn
                                          (change-value (the main-mechanism-class points node-label label-size) (+ (the main-mechanism-class points node-label label-size) 0.1))
                                          (regen)
                                          (update (the superior general-appearance))
                                     )
                    )
                    (smaller-labels-action-button :class ui-action-button-class
                      measurement 'percentage
                      height 10
                      width 10
                      y-offset 20
                      x-offset 70
                      label "-"
                      Button1-action '(progn
                                            (change-value (the main-mechanism-class points node-label label-size) (- (the main-mechanism-class points node-label label-size) 0.1))
                                            (regen)
                                            (update (the superior general-appearance))
                                       )
                      )
                     (label-size-property :class ui-property-field-class
                       measurement 'percentage
                       label-width 0
                       height 10
                       width 10
                       y-offset 20
                       x-offset 80
                       automatic-apply? t
                       content (the main-mechanism-class points node-label label-size)
                       apply-action (progn
                                      (print "apply size")
                                      (change-value (the main-mechanism-class points node-label label-size) ^content)
                                      (regen)
                                    )
                       )
                    (zoom-all-action-button :class ui-action-button-class
                      measurement 'percentage
                      height 10
                      width 40
                      y-offset 30
                      x-offset 20
                      label "Zoom All"
                      Button1-action '(zoom :all)
                      )
                      (iso-view-action-button :class ui-action-button-class
                        measurement 'percentage
                        height 10
                        width 40
                        y-offset 40
                        x-offset 20
                        label "Isometric View"
                        Button1-action '(change-view :iso)
                        )

                )
    )
